//
//  TypeSwift
//  Created by Justin Bush (@buzsh)
//  https://typeswift.org
//  https://github.com/TypeSwift/TypeSwift
//
//  Generated by SwiftGen
//  DO NOT MODIFY THE CONTENTS OF THIS FILE
//

/// An enumeration of TypeScript identifiers generated to be used in Swift code.
enum TypeSwift {
  
  // State Variables
  case total(_ value: Double)
  case textFieldValue(_ value: String)
  case switchValue(_ value: Bool)
  case selectedDevice(_ device: Device)
  case selectedOS(_ os: OperatingSystems)
  
  // Functions
  case updateTotal(_ value: Double)
  case updateDeviceDropdown(_ device: Device)
  case updateOSDropdown(_ os: OperatingSystems)
  case updateTextField(_ text: String)
  case updateSwitch(_ state: Bool)
  
  var jsString: String {
    switch self {
    case .total(let value): return "total.value = \(value)"
    case .textFieldValue(let value): return "textFieldValue.value = `\(value)`"
    case .switchValue(let value): return "switchValue.value = \(value)"
    case .selectedDevice(let device): return "selectedDevice.value = Device.\(device)"
    case .selectedOS(let os): return "selectedOS.value = OperatingSystems.\(os)"
    
      // Functions
    case .updateTotal(let value): return "updateTotal(\(value))"
    case .updateDeviceDropdown(let device): return "updateDeviceDropdown(Device.\(device))"
    case .updateOSDropdown(let os): return "updateOSDropdown(OperatingSystems.\(os))"
    case .updateTextField(let text): return "updateTextField(`\(text)`)"
    case .updateSwitch(let state): return "updateSwitch(\(state))"
    }
  }
}

extension TypeSwift {
  enum Device: String, CaseIterable, Codable {
    case Phone, Pad, Mac, TV, Vision
  }
  
  enum OperatingSystems: String, CaseIterable, Codable {
    case iOS, iPadOS, macOS, tvOS, visionOS
  }
}

import WebKit

extension TypeSwift {
  enum MessageHandlers {
    case total((Double) -> Void)
    case textFieldValue((String) -> Void)
    case switchValue((Bool) -> Void)
    case selectedDevice((Device) -> Void)
    case selectedOS((OperatingSystems) -> Void)
    
    // Static Functions
    case updateTotal((Double) -> Void)
    case updateTextField((String) -> Void)
    case updateDeviceDropdown((Device) -> Void)
    case updateOSDropdown((OperatingSystems) -> Void)
    case updateSwitch((Bool) -> Void)
    
    var name: String {
      switch self {
      case .total: return "total"
      case .textFieldValue: return "textFieldValue"
      case .switchValue: return "switchValue"
      case .selectedDevice: return "selectedDevice"
      case .selectedOS: return "selectedOS"
      
        // Static Functions
      case .updateTotal: return "updateTotal"
      case .updateTextField: return "updateTextField"
      case .updateDeviceDropdown: return "updateDeviceDropdown"
      case .updateOSDropdown: return "updateOSDropdown"
      case .updateSwitch: return "updateSwitch"
      }
    }
    
    func handle(message: WKScriptMessage) {
      switch self {
      case .total(let callback):
        if let value = message.body as? Double {
          callback(value)
        }
      case .textFieldValue(let callback):
        if let value = message.body as? String {
          callback(value)
        }
      case .selectedDevice(let callback):
        if let deviceData = message.body as? String,
           let device = Device(rawValue: deviceData) {
          callback(device)
        }
      case .selectedOS(let callback):
        if let osData = message.body as? String,
           let os = OperatingSystems(rawValue: osData) {
          callback(os)
        }
      case .switchValue(let callback):
        if let value = message.body as? Bool {
          callback(value)
        }
        
      // Static Functions
      case .updateTotal(let callback):
        if let value = message.body as? Double {
          callback(value)
        }
      case .updateTextField(let callback):
        if let value = message.body as? String {
          callback(value)
        }
      case .updateDeviceDropdown(let callback):
        if let deviceData = message.body as? String,
           let device = Device(rawValue: deviceData) {
          callback(device)
        }
      case .updateOSDropdown(let callback):
        if let osData = message.body as? String,
           let os = OperatingSystems(rawValue: osData) {
          callback(os)
        }
      case .updateSwitch(let callback):
        if let value = message.body as? Bool {
          callback(value)
        }
      }
    }
  }
}
